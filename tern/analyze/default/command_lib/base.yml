# Copyright (c) 2017-2020 VMware, Inc. All Rights Reserved.
# SPDX-License-Identifier: BSD-2-Clause
#
# Known package listings for base images
# Format to list images
# <package manager>:
#   pkg_format: <the package format used by the package manager>
#   os_guess: A list of strings that might indicate what kind of OS this package manager may apply to
#   path: A list paths that this package manager may be present
#   pkg_separators: Potential characters to separate package name from version. Some package managers will have more than one.
#   pinning_separator: Character to denote package version in pinned Dockerfile (i.e. apk add package=version)
#   names: <a list of package names>
#     invoke: (if this is a script to invoke include this)
#       1:
#         container: <list of commands> (if the environment is the container)
#       2:
#         host: <list of commands> (if the environment is the host)
#     delimiter: <the delimiter for the commands> 

# tdnf ---------------------------------------------------------------------------------------------------------------------------------
tdnf:
  pkg_format: 'rpm'
  os_guess:
    - 'Photon'
  path:
    - 'usr/bin/tdnf' # don't put forward slash here as os.path.join will think it is the root directory on the host
  pkg_separators:
    - '-'
  pinning_separator: '-'
  names:
    invoke:
      1:
        container:
          # make sure to use single quotes for these lines as
          # docker exec doesn't parse double quotes contiguously
          - 'tdnf check-update > /dev/null' # used to update the repo metadata
          - 'tdnf list installed | cut -f1 -d"."'
    delimiter: "\n" # make sure the delimiter is in double quotes or python will interpret the \ as literal
  versions:
    invoke:
      1:
        container:
          - 'tdnf check-update > /dev/null'
          - 'list=`tdnf list installed`'
          - 'c=0; for l in $list; do if [ $c == 1 ]; then echo $l; fi; c=$(((c+1)%3)); done;'
    delimiter: "\n"
  licenses:
    invoke:
      1:
        container:
          - 'tdnf check-update > /dev/null'
          - 'pkgs=`tdnf list installed | cut -f1 -d"."`'
          - 'for p in $pkgs; do tdnf info $p | head -10 | tail -1 | cut -f2 -d":" | xargs; done'
    delimiter: "\n"
  files: {}
  proj_urls:
    invoke:
      1:
        container:
          - 'tdnf check-update > /dev/null'
          - 'pkgs=`tdnf list installed | cut -f1 -d"."`'
          - 'for p in $pkgs; do tdnf info $p | head -9 | tail -1 | cut -f2-3 -d":" | xargs; done'
    delimiter: "\n"

# dpkg -------------------------------------------------------------------------------------------------------------------------------
dpkg:
  pkg_format: 'deb'
  os_guess:
    - 'Debian'
    - 'Ubuntu'
  path:
    - 'usr/bin/dpkg'
  pkg_separators:
    - '='
  pinning_separator: '='
  # either enter the package names as a list or a snippet to invoke either within or outside the container
  names:
    invoke:
      1:
        # Currently two types of environments are supported - host or container
        container:
          - "dpkg-query -W -f '${Package}\n'"
    delimiter: "\n"
  # the length of this list should be the same as the names or else there will be a mismatch
  versions:
    invoke:
      1:
        container:
          - "dpkg-query -W -f '${Version}\n'"
    delimiter: "\n"
  copyrights:
    invoke:
      1:
        container:
          - "pkgs=`dpkg-query -W -f '${Package}\n'`"
          - "for p in $pkgs; do /bin/cat /usr/share/doc/$p/copyright; echo LICF; done"
    delimiter: 'LICF'
  files:
    invoke:
      1:
        container:
        - "pkgs=`dpkg-query -W -f '${Package}\n'`"
        - "for p in $pkgs; do files=`dpkg-query -L $p`; for file in $files; do if [ -f $file ]; then echo $file; fi; done; echo LICF; done"
    delimiter: "LICF"
  proj_urls:
    invoke:
      1:
        container:
          - "dpkg-query -W -f '${Homepage}\n' | /bin/sed 's/^$/Unknown/'"
    delimiter: "\n"

# apk ---------------------------------------------------------------------------------------------------------
apk:
  pkg_format: 'apk'
  os_guess:
    - 'Alpine Linux'
  path:
    - 'sbin/apk'
  pkg_separators:
    - '='
  pinning_separator: '='
  names:
    invoke:
      1:
        container:
          # send all warnings to /dev/null
          - 'apk info 2>/dev/null'
    delimiter: "\n" # make sure the delimiter is in double quotes or python will interpret the \ as literal
  versions:
    invoke:
      1:
        container:
          # use double quotes when using awk
          - "pkgs=`apk info 2>/dev/null`"
          - "for p in $pkgs; do lic=`apk info $p 2>/dev/null | head -1 | awk '{print $1}'`; echo $lic | sed -e \"s/^$p-//\"; done"
    delimiter: "\n"
  licenses:
    invoke:
      1:
        container:
          - 'pkgs=`apk info 2>/dev/null`'
          - 'for p in $pkgs; do apk -a info $p 2>/dev/null | tail -2 | head -1; done'
    delimiter: "\n"
  files:
    invoke:
      1:
        container:
        - 'pkgs=`apk info 2>/dev/null`'
        - "for p in $pkgs; do files=`apk -L info $p 2>/dev/null`; for file in $files; do if [ -f $file ]; then echo $file; fi; done; echo LICF; done"
    delimiter: "LICF"
  proj_urls:
    invoke:
      1:
        container:
          - 'pkgs=`apk info 2>/dev/null`'
          - 'for p in $pkgs; do apk info $p 2>/dev/null | head -5 | tail -1; done'
    delimiter: "\n"

# pacman ----------------------------------------------------------------------
pacman:
  pkg_format: 'pkg.tar.xz'
  os_guess:
    - 'Arch Linux'
  path:
    - 'usr/bin/pacman'
  pkg_separators:
    - '='
  pinning_separator: '='
  names:
    invoke:
      1:
        container:
          - 'pacman -Qq 2>/dev/null'
    delimiter: "\n"
  versions:
    invoke:
      1:
        container:
          - 'pacman -Q 2>/dev/null | cut -f 2 -d " "'
    delimiter: "\n"
  licenses:
    invoke:
      1:
        container:
          - 'pacman -Qi 2>/dev/null | sed -n "/Licenses/p" | cut -d ":" -f 2'
    delimiter: "\n"
  files:
    invoke:
      1:
        container:
        - 'pkgs=`pacman -Qq 2>/dev/null`'
        - "for p in $pkgs; do files=`pacman -Ql $p 2>/dev/null`; for file in $files; do if [ -f $file ]; then echo $file; fi; done; echo LICF; done"
    delimiter: "LICF"
  proj_urls:
    invoke:
      1:
        container:
          - 'pacman -Qi 2>/dev/null | sed -n "/URL/s/URL.*: //p" '
    delimiter: "\n"

# rpm ----------------------------------------------------------------------
rpm:
  pkg_format: 'rpm'
  os_guess:
    - 'CentOS'
    - 'Fedora'
    - 'openSUSE'
    - 'RHEL'
  path:
    - 'usr/bin/rpm'
  pkg_separators:
    - '-'
  pinning_separator: '-'
  names:
    invoke:
      1:
        container:
          - 'rpm --query --all --queryformat "%{name}\n" 2>/dev/null'
    delimiter: "\n"
  versions:
    invoke:
      1:
        container:
          - 'rpm --query --all --queryformat "%{version}\n" 2>/dev/null'
    delimiter: "\n"
  licenses:
    invoke:
      1:
        container:
          - 'rpm --query --all --queryformat "%{license}\n" 2>/dev/null'
    delimiter: "\n"
  files:
    invoke:
      1:
        container:
        - 'pkgs=`rpm --query --all --queryformat "%{name}\n" 2>/dev/null`'
        - "for p in $pkgs; do files=`rpm -ql $p  2>/dev/null`; for file in $files; do if [ -f $file ]; then echo $file; fi; done; echo LICF; done"
    delimiter: "LICF"
  proj_urls:
    invoke:
      1:
        container:
          - 'rpm --query --all --queryformat "%{url}\n" 2>/dev/null'
    delimiter: "\n"
# pip ----------------------------------------------------------------------
pip:
  pkg_format: 'pip'
  os_guess:
    - 'None'
  path:
    - 'usr/local/bin/pip'
  pkg_separators:
    - '=='
    - '<='
    - '>='
    - '<'
    - '>'
    - '~='
  pinning_separator: '=='
  names:
    invoke:
      1:
        container:
          # send any warnings of outdated pip version to /dev/null
          - "pip list --format=freeze 2> /dev/null | cut -f1 -d'='"
    delimiter: "\n"
  versions:
    invoke:
      1:
        container:
          - "pkgs=`pip list --format=freeze 2> /dev/null | cut -f1 -d'='`"
          - "for p in $pkgs; do pip show $p 2> /dev/null | head -2 | tail -1 | cut -f2 -d' '; done"
    delimiter: "\n"
  licenses:
    invoke:
      1:
        container:
          - "pkgs=`pip list --format=freeze 2> /dev/null | cut -f1 -d'='`"
          - "for p in $pkgs; do pip show $p 2> /dev/null | head -7 | tail -1 | cut -f2 -d' '; done"
    delimiter: "\n"
  proj_urls:
    invoke:
      1:
        container:
          - "pkgs=`pip list --format=freeze 2> /dev/null | cut -f1 -d'='`"
          - "for p in $pkgs; do pip show $p 2> /dev/null | head -4 | tail -1 | cut -f2 -d' '; done"
    delimiter: "\n"
# pip3 ----------------------------------------------------------------------
pip3:
  pkg_format: 'pip'
  os_guess:
    - 'None'
  path:
    - 'usr/local/bin/pip3'
  pkg_separators:
    - '=='
    - '<='
    - '>='
    - '<'
    - '>'
    - '~='
  pinning_separator: '=='
  names:
    invoke:
      1:
        container:
          # send any warnings of outdated pip3 version to /dev/null
          - "pip3 list --format=freeze 2> /dev/null | cut -f1 -d'='"
    delimiter: "\n"
  versions:
    invoke:
      1:
        container:
          - "pkgs=`pip3 list --format=freeze 2> /dev/null | cut -f1 -d'='`"
          - "for p in $pkgs; do pip3 show $p 2> /dev/null | head -2 | tail -1 | cut -f2 -d' '; done"
    delimiter: "\n"
  licenses:
    invoke:
      1:
        container:
          - "pkgs=`pip3 list --format=freeze 2> /dev/null | cut -f1 -d'='`"
          - "for p in $pkgs; do pip3 show $p 2> /dev/null | head -7 | tail -1 | cut -f2 -d' '; done"
    delimiter: "\n"
  proj_urls:
    invoke:
      1:
        container:
          - "pkgs=`pip3 list --format=freeze 2> /dev/null | cut -f1 -d'='`"
          - "for p in $pkgs; do pip3 show $p 2> /dev/null | head -7 | tail -1 | cut -f2 -d' '; done" 
    delimiter: "\n"
gem:
  pkg_format: 'gem'
  os_guess:
    - 'None'
  path:
    - 'usr/local/bin/gem'
  shell: '/bin/bash' # could also be 'usr/bin/sh'
  pkg_separators:
    - ':'
    - '-v '
    - '>='
    - '<='
    - '<'
    - '>'
    - '~>'
    - '-v '
  pinning_separator: ':'
  names:
    invoke:
      1:
        container:
          - "gem list 2> /dev/null | cut -f1 -d' '"
    delimiter: "\n"
  versions:
    invoke:
      1:
        container:
          - "pkgs=`gem list 2> /dev/null | cut -f1 -d' '`"
          - "for p in $pkgs; do gem list $p 2> /dev/null | head -2 | cut -f2 -d'(' | cut -f1 -d')' | cut -f2 -d' '; done" 
    delimiter: "\n"
  licenses:
    invoke:
      1:
        container:
          - "pkgs=`gem list 2> /dev/null | cut -f1 -d' '`"
          # Output 'Unknown' if license is blank
          - "for p in $pkgs; do lic=`gem spec $p license | head -1 | cut -f2 -d' '`; if [ -z $lic ]; then echo 'Unknown'; else echo $lic; fi; done"
    delimiter: "\n"
  proj_urls:
    invoke:
      1:
        container:
          - "pkgs=`gem list 2> /dev/null | awk '{print $1}'`"
          - "for p in $pkgs; do proj_url=`gem spec $p homepage | head -1 | cut -f2 -d' '`; if [ -z $proj_url ]; then echo 'Unknown'; else echo $proj_url; fi; done"
    delimiter: "\n"
# npm----------------------------------------------------------------------
npm:
  pkg_format: 'npm'
  os_guess:
    - 'None'
  path:
    - 'usr/bin/npm'
  pkg_separators:
    - '@'
    - '@^'
    - '@~'
  pinning_separator: '@'
  names:
    invoke:
      1:
        container:
          - "npm list -g --json --long --depth=1000 > npm-global.json"
      2:
        host:
          - "jq -r '.. | objects | select(has(\"name\") and has(\"version\")) | .name' npm-global.json"
    delimiter: "\n"
  versions:
    invoke:
      1:
        container:
          - "npm list -g --json --long --depth=1000 > npm-global.json"
      2:
        host:
          - "jq -r '.. | objects | select(has(\"name\") and has(\"version\")) | .version' npm-global.json"
    delimiter: "\n"
  licenses:
    invoke:
      1:
        container:
          - "npm list -g --json --long --depth=1000 > npm-global.json"
      2:
        host:
          - "jq -r '.. | objects | select(has(\"name\") and has(\"version\")) | .license // \"Unknown\"' npm-global.json"
    delimiter: "\n"
  proj_urls:
    invoke:
      1:
        container:
          - "npm list -g --json --long --depth=1000 > npm-global.json"
      2:
        host:
          - "jq -r '.. | objects | select(has(\"name\") and has(\"version\")) | .repository | if type == \"string\" then . else .url end | . // \"Unknown\"' npm-global.json"
    delimiter: "\n"
  copyrights:
    invoke:
      1:
        container:
          - "npm list -g --json --long --depth=1000 > npm-global.json"
      2:
        host:
          - "paths=`jq -r '.. | objects | select(has(\"name\") and has(\"version\")) | .path // \"Unknown\" | ltrimstr(\"/\")' npm-global.json`"
          - "files=\"license license.md LICENSE LICENSE.md copying copying.md COPYING COPYING.md\""
          - "for p in $paths; do for f in $files; do if [ -f $p/$f ]; then cat $p/$f; break; fi done; echo \"LICF\"; done"
    delimiter: "LICF"
# golang----------------------------------------------------------------------
go:
  pkg_format: 'go'
  os_guess:
    - 'None'
  path:
    - 'usr/local/go/bin'
  names:
    invoke:
      1:  
        container:
          - "go list -m all | tail -n +2 | cut -d ' ' -f 1" 
    delimiter: "\n"
  versions:
    invoke:
      1:
        container:
          - "go list -m all | tail -n +2 | cut -d ' ' -f 2"
    delimiter: "\n"
  copyrights:
    invoke:
      1:
        container:
          - "dirs=`go list -m -f={{{{.Dir}}}} all | tail -n+2`"
          - "for d in $dirs; do find $d -type f -iname 'License' -o -iname 'license.txt' -o -iname 'license.md' | xargs cat; echo LICF; done"
    delimiter: "LICF"
  proj_urls:
    invoke:
      1:
        container:
          - "go list -m all | tail -n +2 | cut -d ' ' -f 1"
    delimiter: "\n"
# distroless------------------------------------------------------------------
distroless:
  pkg_format: 'deb'
  os_guess:
    - 'Distroless'
  path:
    - 'var/lib/dpkg/status.d/'
  names:
    invoke:
      1:  
        host:
          - "files=`ls var/lib/dpkg/status.d`"
          - "for f in $files; do grep -oP '^Package: \\K.*$' var/lib/dpkg/status.d/$f; done"
    delimiter: "\n"
  versions:
    invoke:
      1:  
        host:
          - "files=`ls var/lib/dpkg/status.d`"
          - "for f in $files; do grep -oP '^Version: \\K.*$' var/lib/dpkg/status.d/$f; done"
    delimiter: "\n"
  copyrights:
    invoke:
      1:
        host:
          - "files=`ls var/lib/dpkg/status.d`"
          - "pkgs=`for f in $files; do grep -oP '^Package: \\K.*$' var/lib/dpkg/status.d/$f; done`"
          - "for p in $pkgs; do /bin/cat /usr/share/doc/$p/copyright; echo LICF; done"
    delimiter: "LICF"
  proj_urls: {}
