#!/usr/bin/env python
'''
Copyright (c) 2017 VMware, Inc. All Rights Reserved.
SPDX-License-Identifier: BSD-2-Clause
'''


import argparse
import logging
import os
import report
from common import clear_cache
'''
Tern executable
'''

# logging
logfile = 'tern.log'


def main(args, logger):
    '''Execute according to subcommands'''
    logger.debug('Starting...')
    if args.clear_cache:
        logger.debug('Clearing cache...')
        clear_cache()
    if hasattr(args, 'name') and args.name == 'report':
        logger.debug('Creating Report...')
        if args.summary:
            logger.debug('Creating a summary of components in Docker image...')
        else:
            logger.debug(
                'Creating a detailed report on components in Docker image...')
        report.execute(args)
        logger.debug('Report completed.')
    logger.debug('Finished')


if __name__ == '__main__':

    def check_file_existence(path):
        if not os.path.isfile(path):
            msg = "{}: does not exist".format(path)
            raise argparse.ArgumentTypeError(msg)
        return path

    parser = argparse.ArgumentParser(
        prog='Tern',
        description='''
           Tern is a Docker image package curation tool. Tern retrieves
    information about packages that are installed in a Docker image that is
    built from a Dockerfile, including dependencies. It also allows for
    curation of packages that are installed and maintained manually''')
    parser.add_argument('-c', '--clear-cache', action='store_true',
                        help="Clear the cache before running")
    subparsers = parser.add_subparsers(help='Subcommands')
    # subparser for report
    parser_report = subparsers.add_parser('report',
                                          help="Create a report")
    parser_report.add_argument('-d', '--dockerfile', type=check_file_existence,
                               help="Dockerfile used to build the Docker"
                               " image")
    parser_report.add_argument('-s', '--summary', action='store_true',
                               help="Summarize the report as a list of"
                               " packages with associated information")
    parser_report.set_defaults(name='report')
    args = parser.parse_args()

    # logging setup
    logger = logging.getLogger('ternlog')
    logger.setLevel(logging.DEBUG)

    console = logging.StreamHandler()
    console.setLevel(logging.DEBUG)
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    console.setFormatter(formatter)

    log_handler = logging.FileHandler(logfile, mode='w')
    log_handler.setLevel(logging.DEBUG)
    log_handler.setFormatter(formatter)

    logger.addHandler(console)
    logger.addHandler(log_handler)

    # execute
    main(args, logger)
